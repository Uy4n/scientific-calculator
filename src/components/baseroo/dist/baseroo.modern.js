import{BaseError as t}from"make-error";class n extends t{constructor(t,n){super(`Invalid digit '${t}' for base ${n}.`),this.digit=void 0,this.base=void 0,this.digit=t,this.base=n}}class e extends t{constructor(t,n,e){super(`'${t}' must be between 2 and ${e} not '${n}'.`),this.ref=void 0,this.base=void 0,this.maxBase=void 0,this.ref=t,this.base=n,this.maxBase=e}}const i=BigInt(0),s=BigInt(1),r=BigInt(2);function o(t,n){if(n===i)return s;const e=o(t,n/r);return n%r===i?e*e:t*e*e}const c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/",h=c.split("");function u(t,e){const i=BigInt(e.length);return t.split("").reverse().reduce((t,s,r)=>{const c=e.indexOf(s);if(-1===c)throw new n(s,e.length);return t+BigInt(c)*o(i,BigInt(r))},BigInt(0))}function l(t,i,s){const r=h;if(i<2||i>r.length)throw new e("fromBase",i,r.length);if(s<2||s>r.length)throw new e("toBase",s,r.length);const o="-"===t[0],c=o?"-":"",l=o?t.substring(1):t,[f,g=""]=l.split("."),a=r.slice(0,i),d=r.slice(0,s),B=function(t,n){const e=BigInt(n.length);let i="";for(;t>0;)i=n[Number(t%e)]+i,t=(t-t%e)/e;return i||"0"}(u(f,a),d);if(""!==g){const t=function(t,e){const i=e.length;return t.split("").reduce((t,s,r)=>{const o=e.indexOf(s);if(-1===o)throw new n(s,e.length);return t+o/i**(r+1)},0)}(g,a),e=function(t,n){const e=n.length;let i="";for(let s=0;s<10&&0!==t;s++){const s=Math.floor(t*e);i+=n[s],t=t*e-s}return i}(t,d);return c+B+"."+e}return c+B}export{e as InvalidBaseError,n as InvalidDigitError,l as convertBase,c as defaultAlphabet};
//# sourceMappingURL=baseroo.modern.js.map
