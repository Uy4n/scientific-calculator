{"version":3,"file":"baseroo.modern.js","sources":["../src/baseroo.ts"],"sourcesContent":["import { BaseError } from 'make-error'\n\nexport class InvalidDigitError extends BaseError {\n\tconstructor(public digit: string, public base: number) {\n\t\tsuper(`Invalid digit '${digit}' for base ${base}.`)\n\t}\n}\n\nexport class InvalidBaseError extends BaseError {\n\tconstructor(public ref: string, public base: number, public maxBase: number) {\n\t\tsuper(`'${ref}' must be between 2 and ${maxBase} not '${base}'.`)\n\t}\n}\n\nconst ZERO = BigInt(0)\nconst ONE = BigInt(1)\nconst TWO = BigInt(2)\n\nfunction bigIntPow(x: bigint, y: bigint): bigint {\n\tif (y === ZERO) return ONE\n\tconst p2 = bigIntPow(x, y / TWO)\n\tif (y % TWO === ZERO) return p2 * p2\n\treturn x * p2 * p2\n}\n\nexport const defaultAlphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/'\nconst defaultAlphabetRange = defaultAlphabet.split('')\n\nfunction convertToBase10Integer(integerValue: string, fromAlphabet: string[]): bigint {\n\tconst fromBase = BigInt(fromAlphabet.length)\n\n\treturn integerValue\n\t\t.split('')\n\t\t.reverse()\n\t\t.reduce((carry, digit, index) => {\n\t\t\tconst fromIndex = fromAlphabet.indexOf(digit)\n\t\t\tif (fromIndex === -1) {\n\t\t\t\tthrow new InvalidDigitError(digit, fromAlphabet.length)\n\t\t\t}\n\t\t\treturn carry + BigInt(fromIndex) * bigIntPow(fromBase, BigInt(index))\n\t\t}, BigInt(0))\n}\n\nfunction convertToBase10Fractional(fractionalValue: string, fromAlphabet: string[]): number {\n\tconst fromBase = fromAlphabet.length\n\treturn fractionalValue.split('').reduce((carry, digit, index) => {\n\t\tconst fromIndex = fromAlphabet.indexOf(digit)\n\t\tif (fromIndex === -1) {\n\t\t\tthrow new InvalidDigitError(digit, fromAlphabet.length)\n\t\t}\n\t\treturn carry + fromIndex / fromBase ** (index + 1)\n\t}, 0)\n}\n\nfunction convertFromBase10Integer(base10Integer: bigint, toAlphabet: string[]): string {\n\tconst toBase = BigInt(toAlphabet.length)\n\n\tlet value = ''\n\twhile (base10Integer > 0) {\n\t\tvalue = toAlphabet[Number(base10Integer % toBase)] + value\n\t\tbase10Integer = (base10Integer - (base10Integer % toBase)) / toBase\n\t}\n\n\treturn value || '0'\n}\n\nfunction convertFromBase10Fractional(base10Fractional: number, toAlphabet: string[]): string {\n\tconst precision = 10\n\tconst toBase = toAlphabet.length\n\tlet value = ''\n\tfor (let i = 0; i < precision && base10Fractional !== 0; i++) {\n\t\tconst fractDigit = Math.floor(base10Fractional * toBase)\n\t\tvalue += toAlphabet[fractDigit]\n\t\tbase10Fractional = base10Fractional * toBase - fractDigit\n\t}\n\treturn value\n}\n\nexport function convertBase(value: string, fromBase: number, toBase: number): string {\n\tconst range = defaultAlphabetRange\n\n\tif (fromBase < 2 || fromBase > range.length) {\n\t\tthrow new InvalidBaseError('fromBase', fromBase, range.length)\n\t}\n\tif (toBase < 2 || toBase > range.length) {\n\t\tthrow new InvalidBaseError('toBase', toBase, range.length)\n\t}\n\n\tconst isNegative = value[0] === '-'\n\tconst toBaseSign = isNegative ? '-' : ''\n\tconst absoluteValue = isNegative ? value.substring(1) : value\n\tconst [integerPart, fractionalPart = ''] = absoluteValue.split('.')\n\tconst fromRange = range.slice(0, fromBase)\n\tconst toRange = range.slice(0, toBase)\n\n\tconst base10Integer = convertToBase10Integer(integerPart, fromRange)\n\tconst toBaseInteger = convertFromBase10Integer(base10Integer, toRange)\n\n\tif (fractionalPart !== '') {\n\t\tconst base10Fractional = convertToBase10Fractional(fractionalPart, fromRange)\n\t\tconst toBaseFractional = convertFromBase10Fractional(base10Fractional, toRange)\n\t\treturn toBaseSign + toBaseInteger + '.' + toBaseFractional\n\t}\n\n\treturn toBaseSign + toBaseInteger\n}\n"],"names":["InvalidDigitError","BaseError","constructor","digit","base","super","this","InvalidBaseError","ref","maxBase","ZERO","BigInt","ONE","TWO","bigIntPow","x","y","p2","defaultAlphabet","defaultAlphabetRange","split","convertToBase10Integer","integerValue","fromAlphabet","fromBase","length","reverse","reduce","carry","index","fromIndex","indexOf","convertBase","value","toBase","range","isNegative","toBaseSign","absoluteValue","substring","integerPart","fractionalPart","fromRange","slice","toRange","toBaseInteger","base10Integer","toAlphabet","Number","convertFromBase10Integer","base10Fractional","fractionalValue","convertToBase10Fractional","toBaseFractional","i","fractDigit","Math","floor","convertFromBase10Fractional"],"mappings":"uCAEM,MAAOA,UAA0BC,EACtCC,WAAAA,CAAmBC,EAAsBC,GACxCC,MAAwB,kBAAAF,eAAmBC,MAAQE,KADjCH,WAAsBC,EAAAA,KAAAA,YAAtBE,KAAKH,MAALA,EAAsBG,KAAIF,KAAJA,CAEzC,EAGY,MAAAG,UAAyBN,EACrCC,WAAAA,CAAmBM,EAAoBJ,EAAqBK,GAC3DJ,UAAUG,4BAA8BC,UAAgBL,OAASE,KAD/CE,SAAoBJ,EAAAA,KAAAA,iBAAqBK,aAAA,EAAzCH,KAAGE,IAAHA,EAAoBF,KAAIF,KAAJA,EAAqBE,KAAOG,QAAPA,CAE5D,EAGD,MAAMC,EAAOC,OAAO,GACdC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GAEnB,SAASG,EAAUC,EAAWC,GAC7B,GAAIA,IAAMN,EAAM,OAAOE,EACvB,MAAMK,EAAKH,EAAUC,EAAGC,EAAIH,GAC5B,OAAIG,EAAIH,IAAQH,EAAaO,EAAKA,EAC3BF,EAAIE,EAAKA,CACjB,CAEa,MAAAC,EAAkB,mEACzBC,EAAuBD,EAAgBE,MAAM,IAEnD,SAASC,EAAuBC,EAAsBC,GACrD,MAAMC,EAAWb,OAAOY,EAAaE,QAErC,OAAOH,EACLF,MAAM,IACNM,UACAC,OAAO,CAACC,EAAOzB,EAAO0B,KACtB,MAAMC,EAAYP,EAAaQ,QAAQ5B,GACvC,IAAmB,IAAf2B,EACH,UAAU9B,EAAkBG,EAAOoB,EAAaE,QAEjD,OAAOG,EAAQjB,OAAOmB,GAAahB,EAAUU,EAAUb,OAAOkB,GAAM,EAClElB,OAAO,GACZ,CAqCgB,SAAAqB,EAAYC,EAAeT,EAAkBU,GAC5D,MAAMC,EAAQhB,EAEd,GAAIK,EAAW,GAAKA,EAAWW,EAAMV,OACpC,UAAUlB,EAAiB,WAAYiB,EAAUW,EAAMV,QAExD,GAAIS,EAAS,GAAKA,EAASC,EAAMV,OAChC,UAAUlB,EAAiB,SAAU2B,EAAQC,EAAMV,QAGpD,MAAMW,EAA0B,MAAbH,EAAM,GACnBI,EAAaD,EAAa,IAAM,GAChCE,EAAgBF,EAAaH,EAAMM,UAAU,GAAKN,GACjDO,EAAaC,EAAiB,IAAMH,EAAclB,MAAM,KACzDsB,EAAYP,EAAMQ,MAAM,EAAGnB,GAC3BoB,EAAUT,EAAMQ,MAAM,EAAGT,GAGzBW,EA1CP,SAAkCC,EAAuBC,GACxD,MAAMb,EAASvB,OAAOoC,EAAWtB,QAEjC,IAAIQ,EAAQ,GACZ,KAAOa,EAAgB,GACtBb,EAAQc,EAAWC,OAAOF,EAAgBZ,IAAWD,EACrDa,GAAiBA,EAAiBA,EAAgBZ,GAAWA,EAG9D,OAAOD,GAAS,GACjB,CAgCuBgB,CADA5B,EAAuBmB,EAAaE,GACIE,GAE9D,GAAuB,KAAnBH,EAAuB,CAC1B,MAAMS,EAxDR,SAAmCC,EAAyB5B,GAC3D,MAAMC,EAAWD,EAAaE,OAC9B,OAAO0B,EAAgB/B,MAAM,IAAIO,OAAO,CAACC,EAAOzB,EAAO0B,KACtD,MAAMC,EAAYP,EAAaQ,QAAQ5B,GACvC,IAAmB,IAAf2B,EACH,MAAM,IAAI9B,EAAkBG,EAAOoB,EAAaE,QAEjD,OAAOG,EAAQE,EAAYN,IAAaK,EAAQ,EAAC,EAC/C,EACJ,CA+C2BuB,CAA0BX,EAAgBC,GAC7DW,EAlCR,SAAqCH,EAA0BH,GAC9D,MACMb,EAASa,EAAWtB,OAC1B,IAAIQ,EAAQ,GACZ,IAAK,IAAIqB,EAAI,EAAGA,EAHE,IAGoC,IAArBJ,EAAwBI,IAAK,CAC7D,MAAMC,EAAaC,KAAKC,MAAMP,EAAmBhB,GACjDD,GAASc,EAAWQ,GACpBL,EAAmBA,EAAmBhB,EAASqB,CAChD,CACA,OAAOtB,CACR,CAwB2ByB,CAA4BR,EAAkBN,GACvE,OAAOP,EAAaQ,EAAgB,IAAMQ,CAC3C,CAEA,OAAOhB,EAAaQ,CACrB"}