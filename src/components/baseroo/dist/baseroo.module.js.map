{"version":3,"file":"baseroo.module.js","sources":["../src/baseroo.ts"],"sourcesContent":["import { BaseError } from 'make-error'\n\nexport class InvalidDigitError extends BaseError {\n\tconstructor(public digit: string, public base: number) {\n\t\tsuper(`Invalid digit '${digit}' for base ${base}.`)\n\t}\n}\n\nexport class InvalidBaseError extends BaseError {\n\tconstructor(public ref: string, public base: number, public maxBase: number) {\n\t\tsuper(`'${ref}' must be between 2 and ${maxBase} not '${base}'.`)\n\t}\n}\n\nconst ZERO = BigInt(0)\nconst ONE = BigInt(1)\nconst TWO = BigInt(2)\n\nfunction bigIntPow(x: bigint, y: bigint): bigint {\n\tif (y === ZERO) return ONE\n\tconst p2 = bigIntPow(x, y / TWO)\n\tif (y % TWO === ZERO) return p2 * p2\n\treturn x * p2 * p2\n}\n\nexport const defaultAlphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/'\nconst defaultAlphabetRange = defaultAlphabet.split('')\n\nfunction convertToBase10Integer(integerValue: string, fromAlphabet: string[]): bigint {\n\tconst fromBase = BigInt(fromAlphabet.length)\n\n\treturn integerValue\n\t\t.split('')\n\t\t.reverse()\n\t\t.reduce((carry, digit, index) => {\n\t\t\tconst fromIndex = fromAlphabet.indexOf(digit)\n\t\t\tif (fromIndex === -1) {\n\t\t\t\tthrow new InvalidDigitError(digit, fromAlphabet.length)\n\t\t\t}\n\t\t\treturn carry + BigInt(fromIndex) * bigIntPow(fromBase, BigInt(index))\n\t\t}, BigInt(0))\n}\n\nfunction convertToBase10Fractional(fractionalValue: string, fromAlphabet: string[]): number {\n\tconst fromBase = fromAlphabet.length\n\treturn fractionalValue.split('').reduce((carry, digit, index) => {\n\t\tconst fromIndex = fromAlphabet.indexOf(digit)\n\t\tif (fromIndex === -1) {\n\t\t\tthrow new InvalidDigitError(digit, fromAlphabet.length)\n\t\t}\n\t\treturn carry + fromIndex / fromBase ** (index + 1)\n\t}, 0)\n}\n\nfunction convertFromBase10Integer(base10Integer: bigint, toAlphabet: string[]): string {\n\tconst toBase = BigInt(toAlphabet.length)\n\n\tlet value = ''\n\twhile (base10Integer > 0) {\n\t\tvalue = toAlphabet[Number(base10Integer % toBase)] + value\n\t\tbase10Integer = (base10Integer - (base10Integer % toBase)) / toBase\n\t}\n\n\treturn value || '0'\n}\n\nfunction convertFromBase10Fractional(base10Fractional: number, toAlphabet: string[]): string {\n\tconst precision = 10\n\tconst toBase = toAlphabet.length\n\tlet value = ''\n\tfor (let i = 0; i < precision && base10Fractional !== 0; i++) {\n\t\tconst fractDigit = Math.floor(base10Fractional * toBase)\n\t\tvalue += toAlphabet[fractDigit]\n\t\tbase10Fractional = base10Fractional * toBase - fractDigit\n\t}\n\treturn value\n}\n\nexport function convertBase(value: string, fromBase: number, toBase: number): string {\n\tconst range = defaultAlphabetRange\n\n\tif (fromBase < 2 || fromBase > range.length) {\n\t\tthrow new InvalidBaseError('fromBase', fromBase, range.length)\n\t}\n\tif (toBase < 2 || toBase > range.length) {\n\t\tthrow new InvalidBaseError('toBase', toBase, range.length)\n\t}\n\n\tconst isNegative = value[0] === '-'\n\tconst toBaseSign = isNegative ? '-' : ''\n\tconst absoluteValue = isNegative ? value.substring(1) : value\n\tconst [integerPart, fractionalPart = ''] = absoluteValue.split('.')\n\tconst fromRange = range.slice(0, fromBase)\n\tconst toRange = range.slice(0, toBase)\n\n\tconst base10Integer = convertToBase10Integer(integerPart, fromRange)\n\tconst toBaseInteger = convertFromBase10Integer(base10Integer, toRange)\n\n\tif (fractionalPart !== '') {\n\t\tconst base10Fractional = convertToBase10Fractional(fractionalPart, fromRange)\n\t\tconst toBaseFractional = convertFromBase10Fractional(base10Fractional, toRange)\n\t\treturn toBaseSign + toBaseInteger + '.' + toBaseFractional\n\t}\n\n\treturn toBaseSign + toBaseInteger\n}\n"],"names":["InvalidDigitError","_BaseError","digit","base","_this","call","this","_inheritsLoose","BaseError","InvalidBaseError","_BaseError2","ref","maxBase","_this2","ZERO","BigInt","ONE","TWO","bigIntPow","x","y","p2","defaultAlphabet","defaultAlphabetRange","split","convertToBase10Integer","integerValue","fromAlphabet","fromBase","length","reverse","reduce","carry","index","fromIndex","indexOf","convertBase","value","toBase","range","isNegative","toBaseSign","_absoluteValue$split","substring","integerPart","_absoluteValue$split$","fractionalPart","fromRange","slice","toRange","toBaseInteger","base10Integer","toAlphabet","Number","convertFromBase10Integer","base10Fractional","fractionalValue","Math","pow","convertToBase10Fractional","toBaseFractional","i","fractDigit","floor","convertFromBase10Fractional"],"mappings":"wPAEa,IAAAA,wBAAkBC,GAC9B,SAAAD,EAAmBE,EAAsBC,OAAYC,EAAA,OACpDA,EAAAH,EAAAI,KAAAC,KAAA,kBAAwBJ,EAAmBC,cAAAA,QAAQG,MADjCJ,aAAAE,EAAsBD,UAAA,EAAtBC,EAAKF,MAALA,EAAsBE,EAAID,KAAJA,EAAYC,CAErD,CAAC,OAH6BG,EAAAP,EAAAC,GAG7BD,CAAA,EAHqCQ,GAM1BC,eAAiBC,SAAAA,GAC7B,SAAAD,EAAmBE,EAAoBR,EAAqBS,GAAeC,IAAAA,EAAA,OAC1EA,EAAAH,EAAAL,KAAUM,KAAAA,IAAAA,EAA8BC,2BAAAA,WAAgBT,EAAI,OAAKU,MAD/CF,SAAA,EAAAE,EAAoBV,YAAAU,EAAqBD,aAAzCC,EAAAA,EAAGF,IAAHA,EAAoBE,EAAIV,KAAJA,EAAqBU,EAAOD,QAAPA,EAAeC,CAE3E,CAAC,OAH4BN,EAAAE,EAAAC,GAG5BD,CAAA,CAH4BC,CAAQF,GAMhCM,EAAOC,OAAO,GACdC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GAEnB,SAASG,EAAUC,EAAWC,GAC7B,GAAIA,IAAMN,EAAM,OAAOE,EACvB,IAAMK,EAAKH,EAAUC,EAAGC,EAAIH,GAC5B,OAAIG,EAAIH,IAAQH,EAAaO,EAAKA,EAC3BF,EAAIE,EAAKA,CACjB,CAEa,IAAAC,EAAkB,mEACzBC,EAAuBD,EAAgBE,MAAM,IAEnD,SAASC,EAAuBC,EAAsBC,GACrD,IAAMC,EAAWb,OAAOY,EAAaE,QAErC,OAAOH,EACLF,MAAM,IACNM,UACAC,OAAO,SAACC,EAAO9B,EAAO+B,GACtB,IAAMC,EAAYP,EAAaQ,QAAQjC,GACvC,IAAmB,IAAfgC,EACH,MAAU,IAAAlC,EAAkBE,EAAOyB,EAAaE,QAEjD,OAAOG,EAAQjB,OAAOmB,GAAahB,EAAUU,EAAUb,OAAOkB,GAC/D,EAAGlB,OAAO,GACZ,UAqCgBqB,EAAYC,EAAeT,EAAkBU,GAC5D,IAAMC,EAAQhB,EAEd,GAAIK,EAAW,GAAKA,EAAWW,EAAMV,OACpC,MAAM,IAAIpB,EAAiB,WAAYmB,EAAUW,EAAMV,QAExD,GAAIS,EAAS,GAAKA,EAASC,EAAMV,OAChC,MAAU,IAAApB,EAAiB,SAAU6B,EAAQC,EAAMV,QAGpD,IAAMW,EAA0B,MAAbH,EAAM,GACnBI,EAAaD,EAAa,IAAM,GAEtCE,GADsBF,EAAaH,EAAMM,UAAU,GAAKN,GACCb,MAAM,KAAxDoB,EAAWF,EAAAG,GAAAA,EAAAH,EAAEI,GAAAA,OAAc,IAAAD,EAAG,GAAEA,EACjCE,EAAYR,EAAMS,MAAM,EAAGpB,GAC3BqB,EAAUV,EAAMS,MAAM,EAAGV,GAGzBY,EA1CP,SAAkCC,EAAuBC,GAIxD,IAHA,IAAMd,EAASvB,OAAOqC,EAAWvB,QAE7BQ,EAAQ,GACLc,EAAgB,GACtBd,EAAQe,EAAWC,OAAOF,EAAgBb,IAAWD,EACrDc,GAAiBA,EAAiBA,EAAgBb,GAAWA,EAG9D,OAAOD,GAAS,GACjB,CAgCuBiB,CADA7B,EAAuBmB,EAAaG,GACIE,GAE9D,GAAuB,KAAnBH,EAAuB,CAC1B,IAAMS,EAxDR,SAAmCC,EAAyB7B,GAC3D,IAAMC,EAAWD,EAAaE,OAC9B,OAAO2B,EAAgBhC,MAAM,IAAIO,OAAO,SAACC,EAAO9B,EAAO+B,GACtD,IAAMC,EAAYP,EAAaQ,QAAQjC,GACvC,IAAmB,IAAfgC,EACH,MAAM,IAAIlC,EAAkBE,EAAOyB,EAAaE,QAEjD,OAAOG,EAAQE,EAASuB,KAAAC,IAAG9B,EAAaK,EAAQ,EACjD,EAAG,EACJ,CA+C2B0B,CAA0Bb,EAAgBC,GAC7Da,EAlCR,SAAqCL,EAA0BH,GAI9D,IAHA,IACMd,EAASc,EAAWvB,OACtBQ,EAAQ,GACHwB,EAAI,EAAGA,EAHE,IAGoC,IAArBN,EAAwBM,IAAK,CAC7D,IAAMC,EAAaL,KAAKM,MAAMR,EAAmBjB,GACjDD,GAASe,EAAWU,GACpBP,EAAmBA,EAAmBjB,EAASwB,CAChD,CACA,OAAOzB,CACR,CAwB2B2B,CAA4BT,EAAkBN,GACvE,OAAOR,EAAaS,EAAgB,IAAMU,CAC3C,CAEA,OAAOnB,EAAaS,CACrB"}